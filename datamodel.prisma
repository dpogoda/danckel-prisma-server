type User {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  roomnumber: Int! @unique
  username: String
  password: String!
  fixrequests: [FixRequest!]! @relation(name: "UserFixRequests")
  likes: [FixRequest!]! @relation(name: "UserLikes")
  dislikes: [FixRequest!]! @relation(name: "UserDislikes")
  roles: [Role!]! @scalarList(strategy: RELATION)
	floor: [Floor!]! @relation(name: "UserFloor")
}

type FixRequest {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  author: User! @relation(name: "UserFixRequests")
  title: String!
  text: String!
  likes: [User!]! @relation(name: "UserLikes")
  dislikes: [User!]! @relation(name: "UserDislikes")
  state: FixRequestState! @default(value: OPEN)
}

type Floor {
	id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
	floor: Int!
	color: String!
	remainingFloorMoney: Int!
	members: [User!]! @relation(name: "UserFloor")
}

type News {
	id: ID! @id
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
	title: String!
	text: String!
}


enum Role {
  SV
}

enum FixRequestState {
  OPEN
  SOLVED
}
